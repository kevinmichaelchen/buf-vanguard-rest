// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: bvr/v1beta1/api.proto

package bvrv1beta1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1beta1 "github.com/kevinmichaelchen/buf-vanguard-rest/internal/idl/bvr/v1beta1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// FooServiceName is the fully-qualified name of the FooService service.
	FooServiceName = "bvr.v1beta1.FooService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// FooServiceCreateFooProcedure is the fully-qualified name of the FooService's CreateFoo RPC.
	FooServiceCreateFooProcedure = "/bvr.v1beta1.FooService/CreateFoo"
	// FooServiceGetFooProcedure is the fully-qualified name of the FooService's GetFoo RPC.
	FooServiceGetFooProcedure = "/bvr.v1beta1.FooService/GetFoo"
	// FooServiceListFoosProcedure is the fully-qualified name of the FooService's ListFoos RPC.
	FooServiceListFoosProcedure = "/bvr.v1beta1.FooService/ListFoos"
	// FooServiceDeleteFooProcedure is the fully-qualified name of the FooService's DeleteFoo RPC.
	FooServiceDeleteFooProcedure = "/bvr.v1beta1.FooService/DeleteFoo"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	fooServiceServiceDescriptor         = v1beta1.File_bvr_v1beta1_api_proto.Services().ByName("FooService")
	fooServiceCreateFooMethodDescriptor = fooServiceServiceDescriptor.Methods().ByName("CreateFoo")
	fooServiceGetFooMethodDescriptor    = fooServiceServiceDescriptor.Methods().ByName("GetFoo")
	fooServiceListFoosMethodDescriptor  = fooServiceServiceDescriptor.Methods().ByName("ListFoos")
	fooServiceDeleteFooMethodDescriptor = fooServiceServiceDescriptor.Methods().ByName("DeleteFoo")
)

// FooServiceClient is a client for the bvr.v1beta1.FooService service.
type FooServiceClient interface {
	CreateFoo(context.Context, *connect.Request[v1beta1.CreateFooRequest]) (*connect.Response[v1beta1.CreateFooResponse], error)
	GetFoo(context.Context, *connect.Request[v1beta1.GetFooRequest]) (*connect.Response[v1beta1.GetFooResponse], error)
	ListFoos(context.Context, *connect.Request[v1beta1.ListFoosRequest]) (*connect.Response[v1beta1.ListFoosResponse], error)
	DeleteFoo(context.Context, *connect.Request[v1beta1.DeleteFooRequest]) (*connect.Response[v1beta1.DeleteFooResponse], error)
}

// NewFooServiceClient constructs a client for the bvr.v1beta1.FooService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewFooServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) FooServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &fooServiceClient{
		createFoo: connect.NewClient[v1beta1.CreateFooRequest, v1beta1.CreateFooResponse](
			httpClient,
			baseURL+FooServiceCreateFooProcedure,
			connect.WithSchema(fooServiceCreateFooMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getFoo: connect.NewClient[v1beta1.GetFooRequest, v1beta1.GetFooResponse](
			httpClient,
			baseURL+FooServiceGetFooProcedure,
			connect.WithSchema(fooServiceGetFooMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listFoos: connect.NewClient[v1beta1.ListFoosRequest, v1beta1.ListFoosResponse](
			httpClient,
			baseURL+FooServiceListFoosProcedure,
			connect.WithSchema(fooServiceListFoosMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteFoo: connect.NewClient[v1beta1.DeleteFooRequest, v1beta1.DeleteFooResponse](
			httpClient,
			baseURL+FooServiceDeleteFooProcedure,
			connect.WithSchema(fooServiceDeleteFooMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// fooServiceClient implements FooServiceClient.
type fooServiceClient struct {
	createFoo *connect.Client[v1beta1.CreateFooRequest, v1beta1.CreateFooResponse]
	getFoo    *connect.Client[v1beta1.GetFooRequest, v1beta1.GetFooResponse]
	listFoos  *connect.Client[v1beta1.ListFoosRequest, v1beta1.ListFoosResponse]
	deleteFoo *connect.Client[v1beta1.DeleteFooRequest, v1beta1.DeleteFooResponse]
}

// CreateFoo calls bvr.v1beta1.FooService.CreateFoo.
func (c *fooServiceClient) CreateFoo(ctx context.Context, req *connect.Request[v1beta1.CreateFooRequest]) (*connect.Response[v1beta1.CreateFooResponse], error) {
	return c.createFoo.CallUnary(ctx, req)
}

// GetFoo calls bvr.v1beta1.FooService.GetFoo.
func (c *fooServiceClient) GetFoo(ctx context.Context, req *connect.Request[v1beta1.GetFooRequest]) (*connect.Response[v1beta1.GetFooResponse], error) {
	return c.getFoo.CallUnary(ctx, req)
}

// ListFoos calls bvr.v1beta1.FooService.ListFoos.
func (c *fooServiceClient) ListFoos(ctx context.Context, req *connect.Request[v1beta1.ListFoosRequest]) (*connect.Response[v1beta1.ListFoosResponse], error) {
	return c.listFoos.CallUnary(ctx, req)
}

// DeleteFoo calls bvr.v1beta1.FooService.DeleteFoo.
func (c *fooServiceClient) DeleteFoo(ctx context.Context, req *connect.Request[v1beta1.DeleteFooRequest]) (*connect.Response[v1beta1.DeleteFooResponse], error) {
	return c.deleteFoo.CallUnary(ctx, req)
}

// FooServiceHandler is an implementation of the bvr.v1beta1.FooService service.
type FooServiceHandler interface {
	CreateFoo(context.Context, *connect.Request[v1beta1.CreateFooRequest]) (*connect.Response[v1beta1.CreateFooResponse], error)
	GetFoo(context.Context, *connect.Request[v1beta1.GetFooRequest]) (*connect.Response[v1beta1.GetFooResponse], error)
	ListFoos(context.Context, *connect.Request[v1beta1.ListFoosRequest]) (*connect.Response[v1beta1.ListFoosResponse], error)
	DeleteFoo(context.Context, *connect.Request[v1beta1.DeleteFooRequest]) (*connect.Response[v1beta1.DeleteFooResponse], error)
}

// NewFooServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewFooServiceHandler(svc FooServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	fooServiceCreateFooHandler := connect.NewUnaryHandler(
		FooServiceCreateFooProcedure,
		svc.CreateFoo,
		connect.WithSchema(fooServiceCreateFooMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	fooServiceGetFooHandler := connect.NewUnaryHandler(
		FooServiceGetFooProcedure,
		svc.GetFoo,
		connect.WithSchema(fooServiceGetFooMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	fooServiceListFoosHandler := connect.NewUnaryHandler(
		FooServiceListFoosProcedure,
		svc.ListFoos,
		connect.WithSchema(fooServiceListFoosMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	fooServiceDeleteFooHandler := connect.NewUnaryHandler(
		FooServiceDeleteFooProcedure,
		svc.DeleteFoo,
		connect.WithSchema(fooServiceDeleteFooMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/bvr.v1beta1.FooService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case FooServiceCreateFooProcedure:
			fooServiceCreateFooHandler.ServeHTTP(w, r)
		case FooServiceGetFooProcedure:
			fooServiceGetFooHandler.ServeHTTP(w, r)
		case FooServiceListFoosProcedure:
			fooServiceListFoosHandler.ServeHTTP(w, r)
		case FooServiceDeleteFooProcedure:
			fooServiceDeleteFooHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedFooServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedFooServiceHandler struct{}

func (UnimplementedFooServiceHandler) CreateFoo(context.Context, *connect.Request[v1beta1.CreateFooRequest]) (*connect.Response[v1beta1.CreateFooResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bvr.v1beta1.FooService.CreateFoo is not implemented"))
}

func (UnimplementedFooServiceHandler) GetFoo(context.Context, *connect.Request[v1beta1.GetFooRequest]) (*connect.Response[v1beta1.GetFooResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bvr.v1beta1.FooService.GetFoo is not implemented"))
}

func (UnimplementedFooServiceHandler) ListFoos(context.Context, *connect.Request[v1beta1.ListFoosRequest]) (*connect.Response[v1beta1.ListFoosResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bvr.v1beta1.FooService.ListFoos is not implemented"))
}

func (UnimplementedFooServiceHandler) DeleteFoo(context.Context, *connect.Request[v1beta1.DeleteFooRequest]) (*connect.Response[v1beta1.DeleteFooResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bvr.v1beta1.FooService.DeleteFoo is not implemented"))
}
